install.packages("rstanarm")
knitr::opts_chunk$set(echo = TRUE,
warning=FALSE,
message=FALSE)
pacman::p_load("rstanarm","bayesplot","AER","BGAM","brms","ggplot2","glmx","boot")
knitr::opts_chunk$set(echo = TRUE,
warning=FALSE,
message=FALSE)
pacman::p_load("rstanarm","bayesplot","AER","brms","ggplot2","glmx","boot")
install.packages("rstanarm")
install.packages("rstanarm")
install.packages("brms")
install.packages("brms")
knitr::opts_chunk$set(echo = TRUE,
warning=FALSE,
message=FALSE)
pacman::p_load("rstanarm","bayesplot","AER","BGAM","brms","ggplot2","glmx","boot")
risk <- read.csv("https://raw.githubusercontent.com/avehtari/ROS-Examples/master/RiskyBehavior/data/risky.csv",header=T)
risk <- read.csv("https://raw.githubusercontent.com/avehtari/ROS-Examples/master/RiskyBehavior/data/risky.csv",header=T)
risk <- read.csv("https://raw.githubusercontent.com/avehtari/ROS-Examples/master/RiskyBehavior/data/risky.csv",header=T)
risk <- read.csv("https://raw.githubusercontent.com/avehtari/ROS-Examples/master/RiskyBehavior/data/risky.csv",header=T)
risk <- read.csv("/Users/mac/Desktop/BU Mssp/MA678/ROS-Examples-master/RiskyBehavior/data/risky.csv",header=T)
risk$fupacts_R = round(risk$fupacts)
risk$fupacts_R
## read the data
ag_data <- read_csv("/Users/mac/Desktop/berries.csv", col_names = TRUE)
library(knitr)
library(tidyverse)
library(magrittr)
library(kableExtra)
install.packages("kableExtra")
library(knitr)
library(tidyverse)
library(magrittr)
library(kableExtra)
opts_chunk$set(echo = FALSE,
warning = FALSE,
message = FALSE)
## read the data
ag_data <- read_csv("/Users/mac/Desktop/berries.csv", col_names = TRUE)
## look at number of unique values in each column
ag_data %>% summarize_all(n_distinct) -> aa
## make a list of the columns with only one unique value
bb <- which(aa[1,]==1)
## list the 1-unique valu column names
cn <- colnames(ag_data)[bb]
view(ag_data)
## remove the 1-unique columns from the dataset
ag_data %<>% select(-all_of(bb))
aa %<>% select(-all_of(bb))
## State name and the State ANSI code are (sort of) redundant
## Just keep the name
ag_data %<>% select(-4)
aa %<>% select(-4)
kable(head(ag_data)) %>%
kable_styling(font_size=12)
berry <- unique(ag_data$Commodity)
nberry <- length(berry)
bberry <- ag_data %>% filter((Commodity=="BLUEBERRIES") & (Period=="YEAR"))
bberry %<>% select(-c(Period, Commodity))
#### Does every Data Item begin with "
sum(str_detect(bberry$`Data Item`, "^BLUEBERRIES, ")) == length(bberry$`Data Item`)
# di <- bberry$`Data Item`
# di_m <- str_split(di, ",", simplify=TRUE)
# dim(di_m)
#
# unique(di_m[,1])
# di_m <- di_m[,2:4]
bberry %<>% separate(`Data Item`, c("B","type", "meas", "what"), sep = ",")
bberry %<>% select(-B)
# head(bberry$type, n=20)
# ty <- str_split(bberry$type, " ", simplify=TRUE)
# head(ty, n=20)
bberry %<>% separate(type,c("b1", "type", "b2", "lab1", "lab2"), " ")
bberry %<>% select(-c(b1,b2))
bberry[is.na(bberry)] <- " "  ## OK now Data Item has been split into parts
## onto Domain
# bberry$Domain %>% unique()
bberry %<>% separate(Domain, c("D_left", "D_right"), sep = ", ")
# bberry$D_left %>% unique()
# bberry$D_right %>% unique()
bberry[is.na(bberry)] <- " "
## And now Domain Category
## bberry$`Domain Category` %>% unique()
bberry %<>% separate(`Domain Category`, c("DC_left", "DC_right"), sep = ", ")
## looks like DC_left combines labels
head(bberry$DC_left %>% unique(),n=20)
head(bberry$DC_right %>% unique(), n=20)
## work on DC_left first
bberry %<>% separate(DC_left, c("DC_left_l", "DC_left_r"), sep = ": ")
## bberry$DC_left_l %>% unique()
## bberry$DC_left_r %>% unique()
## now work on DC_right
head(bberry$DC_right %>% unique(), n=20)
bberry %<>% separate(DC_right, c("DC_right_l", "DC_right_r"), sep = ": ")
bberry[is.na(bberry)] <- " "
##  OK now we need to eliminate the redundancy
## fine and remove redundant columns
## paste(bberry$D_left,bberry$DC_left_l) %>% unique
## returns -- "TOTAL NOT SPECIFIED"   "CHEMICAL CHEMICAL"     "FERTILIZER FERTILIZER"
## remove column bberry$DC_left_l
bberry %<>%  select(-DC_left_l)
## test
# sum(bberry$D_right == bberry$DC_right_l)
# [1] 7419
# > bberry$DC_left_r %>% unique()
# [1] " "           "(NITROGEN)"  "(PHOSPHATE)" "(POTASH)"    "(SULFUR)"
## remove column DC_right_l
bberry %<>% select(-DC_right_l)
## Test for lab1, lab2
# paste(bberry$lab1, bberry$lab2) %>% unique()
# [1] "ACRES HARVESTED" "PRODUCTION  "    "YIELD  "         "   "             "APPLICATIONS  "
# [6] "TREATED  "
bberry %<>% mutate(label = paste(lab1,lab2))
## test for necisity of "chemical" in col D_left
# paste(bberry$D_left, bberry$D_right) %>% unique()
# [1] "TOTAL  "              "CHEMICAL FUNGICIDE"   "CHEMICAL HERBICIDE"   "CHEMICAL INSECTICIDE"
# [5] "CHEMICAL OTHER"       "FERTILIZER  "
## remove "Chemical" and joint the columns
bberry %<>% mutate(D_left = "CHEMICAL", D_left = "")
bberry %<>% mutate(Chemical=paste(D_left, D_right))
bberry %<>% select(-c(D_left, D_right))
bberry %<>% select(Year, State, type, what, meas, label, DC_left_r, DC_right_r, Chemical, Value )
###  Now the problem is that we have entries in both the "what" and "meas" columns
##  that begin  "MEASURED IN"
##  how many are there
## in the column "what"
cnt_1 <- str_detect(bberry$what, "MEASURED IN")
sum(cnt_1)
## in the column "meas"
cnt_2 <- str_detect(bberry$meas, "MEASURED IN")
sum(cnt_2)
## We want to put them all in the same column
## So, we will separate them from their current column and put them into
## two columns -- then we will test to make sure there aren't any overlaps
## and then merge the two columns
## we're going to use PURRR.  We need a simple function that takes a logical
## variable and a second variable.  It returns the second variable if the logical
## variable is true and returns a blank if it is false
f1 <- function(a,b){
if(a){
return(b)
}else{
return("")
}
}
#################################################
##  try it
f1(TRUE,"hi")
f1(!TRUE, "hi")
## now try it with map2()
f1_log <- c(FALSE, TRUE, TRUE)
f1_str <- c("one", "two", "three")
map2(f1_log, f1_str, f1)
#########################################################
## now let's separate the "MEASURED IN" entries in the meas column
## form an index of the entries to be separated out
index_meas <- str_detect(bberry$meas, "MEASURED IN")
## verify the first six values against the dats bberry
head(index_meas)
new <- map2(index_meas, bberry$meas, f1)
new <- unlist(new)
head(new, n=20)
######################################################
bberry %<>% mutate(m_in_1 = unlist(map2(index_meas, bberry$meas, f1)))
#
#
# b_f <- bberry
#
#
#
#  l1 <- "MEASURED IN LB"
#  l2 <- "howdy"
#  l3 <- "MEASURED IN LB / ACRE"
#
#  str_replace(c(l1,l2,l3), "MEASURED IN.*$", "")
#
# tmp <- str_replace(l4, "MEASURED IN.*$", "")
#
# b_f %<>%  mutate(meas = str_replace(b_f$meas, "MEASURED IN.*$", "" ))
#
# Check on whether it worked
#
# cnt_l <- str_detect(b_f$meas, "MEASURED IN")
# sum(cnt_l)
#
bberry %<>% mutate(meas = str_replace(bberry$meas, "MEASURED IN.*$", ""))
## Check
cnt_3 <- str_detect(bberry$meas, "MEASURED IN")
sum(cnt_3)
#########################
## Now we will do the same thing with the
## "what" column
### index of cells to be isolated
index_what <- str_detect(bberry$what, "MEASURED IN")
sum(index_what)
### create a column of the isolated cells
bberry %<>% mutate(m_in_2 = unlist(map2(index_what, bberry$what, f1)))
###  eliminate the isolated cells from the original column
bberry %<>% mutate(what = str_replace(bberry$what, "MEASURED IN.*$", ""))
### test that theere are no more "MEASURED IN" cells in the original column
cnt_what <- str_detect(bberry$what, "MEASURED IN")
sum(cnt_what)
### Check for overlaps
bberry %<>% mutate(units = str_trim(paste(m_in_1, m_in_2)))
bberry$units %>% unique()
## now let's clean it up
bberry$what %>% unique()  ## rename Avg
bberry$meas %>% unique()  ## rename marketing
bberry$label %>% unique() ## rename harvest
bberry$DC_left_r %>% unique() # rename chemical_family
tmp <- bberry$DC_right_r %>% unique() # rename materials --213
tmp <- bberry$Value %>% unique() # values
tmp <- bberry$units %>% unique() # Measures
bberry %<>% rename(Avg = what)
bberry %<>% rename(Marketing = meas, Harvest = label, Chem_family = DC_left_r, Materials = DC_right_r, Measures = units)
colnames(bberry)
bberry %<>% select(Year, State, type, Marketing,
Measures, Avg, Harvest, Chem_family,
Materials, Chemical, Value )
str_trim(paste(bberry$Marketing, bberry$Harvest)) %>% unique
###  these belong in one column
bberry %<>% mutate(production = str_trim(paste(Marketing, Harvest)))
bberry %<>% select(Year, State, type, production, Measures,
Avg, Chem_family, Materials, Chemical, Value)
## I missed this one !!
bberry %<>% mutate(Chemical = str_trim(paste(Chem_family, Chemical)))
bberry %<>% select(Year, State, type, production, Avg, Measures, Materials, Chemical, Value)
### let's look at chemicals being applied to food
unfood <- bberry %<>% filter(production=="APPLICATIONS")
unfood %<>% filter(Value != "(D)")
unfood %<>% filter(Value !=  "(NA)")
unfood %<>% filter(Measures == "MEASURED IN LB / ACRE / APPLICATION")
unfood$type %>% unique()                  ## BEARING
unfood$production %>% unique()            ## APPLICATIONS
unfood$Avg %>% unique()                   ## AVG
unfood$Measures %>% unique()              ## MEASURED IN LB / ACRE / APPLICATION
unfood$Materials %>% unique()      ## long list!!
unfood$Chemical %>% unique()
unfood_1 <- unfood %>%  select(Year, State, Chemical, Value)
unfood_1 %<>% pivot_wider(names_from = Chemical, values_from = Value)
a <- unfood_1$FUNGICIDE
#kable(head(bberry, n=10)) %>% kable_styling(font_size=12)
## onto Domain
view(bbery)
## onto Domain
view(bberry)
view(risk)
risk <- read.csv("/Users/mac/Desktop/BU Mssp/MA678/ROS-Examples-master/RiskyBehavior/data/risky.csv",header=T)
risk$fupacts_R = round(risk$fupacts)
view(risk)
y <- risk$fupacts_R
x <- risk$bupacts
# Then we fit the model to the data:
fit_fake <- stan_glm(y ~ x, family=poisson(link="log"), data=fake)
head(risk)
risk <- read.csv("/Users/mac/Desktop/BU Mssp/MA678/ROS-Examples-master/RiskyBehavior/data/risky.csv",header=T)
risk$fupacts_R = round(risk$fupacts)
head(risk)
# Then we fit the model to the data:
fit_fake <- stan_glm(risk$fupacts_R ~ risk$bupacts, family=poisson(link="log"), data=risk)
print(fit_fake)
# Then we plot the data along with the fitted curve:
plot(x, y)
curve(exp(coef(fit_fake)[1] + coef(fit_fake)[2]*x), add=TRUE)
x
risk <- read.csv("/Users/mac/Desktop/BU Mssp/MA678/ROS-Examples-master/RiskyBehavior/data/risky.csv",header=T)
risk$fupacts_R = round(risk$fupacts)
head(risk)
# Then we fit the model to the data:
fit_fake <- stan_glm(risk$fupacts_R ~ risk$bupacts, family=poisson(link="log"), data=risk, )
print(fit_fake)
# Then we plot the data along with the fitted curve:
y <- risk$fupacts_R
x <- risk$bupacts
plot(x, y)
curve(exp(coef(fit_fake)[1] + coef(fit_fake)[2]*x), add=TRUE)
y <- risk$fupacts_R
y
x <- risk$bupacts
x
plot(x, y)
curve(exp(coef(fit_fake)[1] + coef(fit_fake)[2]*x), add=TRUE)
plot(x, y)
curve(exp(coef(fit_fake)[1] + coef(fit_fake)[2]*x), add=TRUE)
risk <- read.csv("/Users/mac/Desktop/BU Mssp/MA678/ROS-Examples-master/RiskyBehavior/data/risky.csv",header=T)
risk$fupacts_R = round(risk$fupacts)
head(risk)
# Then we fit the model to the data:
fit_fake <- stan_glm(risk$fupacts_R ~ risk$bupacts, family=poisson(link="log"), data=risk,refresh=0 )
print(fit_fake)
# Then we plot the data along with the fitted curve:
y <- risk$fupacts_R
x <- risk$bupacts
plot(x, y)
curve(exp(coef(fit_fake)[1] + coef(fit_fake)[2]*x), add=TRUE)
risk <- read.csv("/Users/mac/Desktop/BU Mssp/MA678/ROS-Examples-master/RiskyBehavior/data/risky.csv",header=T)
risk$fupacts_R = round(risk$fupacts)
head(risk)
# Then we fit the model to the data:
fit_1 <- stan_glm(risk$fupacts_R ~ women_alone, family=poisson(link="log"), data=risk,refresh=0 )
print(fit_1)
# Then we plot the data along with the fitted curve:
y <- risk$fupacts_R
x <- risk$women_alone
plot(x, y)
curve(exp(coef(fit_1)[1] + coef(fit_1)[2]*x), add=TRUE)
# Since only bupacts is a continuous variable among the variables, it will cause certain problems when compared with other binary variables, so the standardization process is carried out first.
risk$bupacts_new <- (risk$bupacts - mean(risk$bupacts))/(2*sd(risk$bupacts))
fit1_b<- stan_glm(risk$fupacts ~risk$women_alone + risk$sex + risk$bupacts_new + risk$couples + risk$bs_hiv, family=poisson, data=risk,refresh=0)
risk$bupacts_new <- (risk$bupacts - mean(risk$bupacts))/(2*sd(risk$bupacts))
risk
# Since only bupacts is a continuous variable among the variables, it will cause certain problems when compared with other binary variables, so the standardization process is carried out first.
risk$bupacts_new <- (risk$bupacts - mean(risk$bupacts))/(2*sd(risk$bupacts))
fit1_b<- stan_glm(risk$fupacts_R ~risk$women_alone + risk$sex + risk$bupacts_new + risk$couples + risk$bs_hiv, family=poisson, data=risk,refresh=0)
print(fit1_b)
# Since only bupacts is a continuous variable among the variables, it will cause certain problems when compared with other binary variables, so the standardization process is carried out first.
risk$bupacts_new <- (risk$bupacts - mean(risk$bupacts))/(2*sd(risk$bupacts))
fit1_b<- stan_glm(risk$fupacts_R ~risk$women_alone + risk$sex + risk$bupacts_new + risk$couples + risk$bs_hiv, family=poisson(link="log"), data=risk, refresh=0)
print(fit1_b)
summary(fit_b)
summary(fit1_b)
summary(fit1_b)
display(fit1_b)
display(fit1_b)
knitr::opts_chunk$set(echo = TRUE,
warning=FALSE,
message=FALSE)
pacman::p_load("tidyverse","rstanarm","bayesplot","AER","BGAM","brms","ggplot2","glmx","boot")
display(fit1_b)
?display
view(fit1_b)
head(fit1_b)
plot(x=fit_1$residuals,y=fit_1$fitted.values)
plot(x=fit1_b$residuals,y=fit1_b$fitted.values)
fitted.values
fit1_b$fitted.values
# Since only bupacts is a continuous variable among the variables, it will cause certain problems when compared with other binary variables, so the standardization process is carried out first.
risk$bupacts_new <- (risk$bupacts - mean(risk$bupacts))/(2*sd(risk$bupacts))
fit1_b<- stan_glm(risk$fupacts_R ~risk$women_alone + risk$sex + risk$bupacts_new + risk$couples + risk$bs_hiv, family=poisson(link="log"), data=risk, refresh=0)
print(fit1_b)
plot(x=fit1_b$residuals,y=fit1_b$fitted.values)
par(mfrow=c(1,2))
plot(predict(fit1_b), residuals(fit1_b), xlab="Predicted", ylab="Residuals")
abline(a=0, b=0, lty=3)
plot(predict(fit1_b), rstandard(fit1_b), xlab="Predicted", ylab="Standardized Residuals")
rstandard(fit1_b)
predict(fit1_b)
plot(predict(fit1_b), residuals(fit1_b), xlab="Predicted", ylab="Residuals")
abline(a=0, b=0, lty=3)
plot(predict(fit_1), residuals(fit_1), xlab="Predicted", ylab="Residuals")
abline(a=0, b=0, lty=3)
plot(predict(fit_1), residuals(fit_1), xlab="Predicted", ylab="Residuals")
dispersiontest(fit_1, trafo=1)
dispersiontest(fit1_b, trafo=1)
？dispersiontest()
?dispersiontest()
# Fitting a negative binomial (overdispersed Poisson) model.
fit1_c<- stan_glm(risk$fupacts_R ~risk$women_alone + risk$sex + risk$bupacts_new + risk$couples + risk$bs_hiv, family=quasipoisson, data=risk, refresh=0)
# Fitting a negative binomial (overdispersed Poisson) model.
fit1_c<- stan_glm(risk$fupacts_R ~risk$women_alone + risk$sex + risk$bupacts_new + risk$couples + risk$bs_hiv, family=neg_binomial_2(link="log"), data=risk, refresh=0)
print(fit1_c)
# Since only bupacts is a continuous variable among the variables, it will cause certain problems when compared with other binary variables, so the standardization process is carried out first.
risk$bupacts_new <- (risk$bupacts - mean(risk$bupacts))/(2*sd(risk$bupacts))
# Fitting with additional pre-treatment variables
fit1_b<- stan_glm(risk$fupacts_R ~risk$women_alone + risk$sex + risk$bupacts_new + risk$couples + risk$bs_hiv, family=poisson(link="log"), data=risk, refresh=0)
print(fit1_b)
plot(predict(fit1_b), residuals(fit1_b), xlab="Predicted", ylab="Residuals")
binnedplot(predict(fit1_b), rstandard(fit1_b))
knitr::opts_chunk$set(echo = TRUE,
warning=FALSE,
message=FALSE)
pacman::p_load("tidyverse","rstanarm","bayesplot","AER","BGAM","brms","ggplot2","glmx","boot","arm","foreign")
# Since only bupacts is a continuous variable among the variables, it will cause certain problems when compared with other binary variables, so the standardization process is carried out first.
risk$bupacts_new <- (risk$bupacts - mean(risk$bupacts))/(2*sd(risk$bupacts))
# Fitting with additional pre-treatment variables
fit1_b<- stan_glm(risk$fupacts_R ~risk$women_alone + risk$sex + risk$bupacts_new + risk$couples + risk$bs_hiv, family=poisson(link="log"), data=risk, refresh=0)
print(fit1_b)
plot(predict(fit1_b), residuals(fit1_b), xlab="Predicted", ylab="Residuals")
binnedplot(predict(fit1_b), rstandard(fit1_b))
boxplot(predict(fit1_b), rstandard(fit1_b))
# Fitting a negative binomial (overdispersed Poisson) model.
fit1_c<- stan_glm(risk$fupacts_R ~risk$women_alone + risk$sex + risk$bupacts_new + risk$couples + risk$bs_hiv, family=neg_binomial_2(link="log"), data=risk, refresh=0)
print(fit1_c)
plot(predict(fit1_c), residuals(fit1_c), xlab="Predicted", ylab="Residuals")
dispersiontest(fit1_c, trafo=1) # Overdispersion corresponds to alpha > 0 and underdispersion to alpha < 0.
# Fitting a negative binomial (overdispersed Poisson) model.
fit1_c<- stan_glm(risk$fupacts_R ~risk$women_alone + risk$sex + risk$bupacts_new + risk$couples + risk$bs_hiv, family=neg_binomial_2(link="log"), data=risk, refresh=0)
print(fit1_c)
plot(predict(fit1_c), residuals(fit1_c), xlab="Predicted", ylab="Residuals")
dispersiontest(fit1_c, trafo=1) # Overdispersion corresponds to alpha > 0 and underdispersion to alpha < 0.
data_c <- data.frame(predict(fit1_c),residuals(fit1_c))
ggplot(data=data_c, aes(x=predict(fit1_c), residuals(fit1_c))) +
geom_boxplot() +
ylim(-10, 10)
ggplot(data=data_c, aes(x=predict(fit1_c), residuals(fit1_c))) +
geom_point() +
ylim(-10, 10)
ggplot(data=data_c, aes(x=predict(fit1_c), residuals(fit1_c))) +
geom_point()
ggplot(data=data_c, aes(x=predict(fit1_c), residuals(fit1_c))) +
geom_point() +
ylim(-100, 100)
plot(predict(fit1_c), residuals(fit1_c), xlab="Predicted", ylab="Residuals")
lalonde = foreign::read.dta("https://github.com/avehtari/ROS-Examples/blob/master/Lalonde/NSW_dw_obs.dta?raw=true")
lalonde = foreign::read.dta("/Users/mac/Desktop/BU Mssp/MA678/ROS-Examples-master/Lalonde/NSW_dw_obs.dta?raw=true")
lalonde = foreign::read.dta("/Users/mac/Desktop/BU Mssp/MA678/ROS-Examples-master/Lalonde/NSW_dw_obs.dta")
lalonde <-  foreign::read.dta("/Users/mac/Desktop/BU Mssp/MA678/ROS-Examples-master/Lalonde/NSW_dw_obs.dta")
lalonde
# Load the data
lalonde <-  foreign::read.dta("/Users/mac/Desktop/BU Mssp/MA678/ROS-Examples-master/Lalonde/NSW_dw_obs.dta")
head(lalonde)
# logistic regression for zero earnings versus positive earnings
lalonde$zero <- ifelse(lalonde&re78==0, 0, 1)
# Load the data
lalonde <-  foreign::read.dta("/Users/mac/Desktop/BU Mssp/MA678/ROS-Examples-master/Lalonde/NSW_dw_obs.dta")
head(lalonde)
# creating factors
lalonde$sample <- factor(lalonde$sample, labels=c("NSW", "CPS", "PSID"))
lalonde$black <- factor(lalonde$black)
lalonde$hisp <- factor(lalonde$hisp)
lalonde$nodegree <- factor(lalonde$nodegree)
lalonde$married <- factor(lalonde$married)
lalonde$treat <- factor(lalonde$treat)
lalonde$educ_cat4 <- factor(lalonde$educ_cat4, labels=c("less than high school", "high school", "sm college", "college"))
# To create a function to normalise and standardise numeric variables
standardise <- function(X) {
cols <- ncol(X)
for (c in 1:cols) {
if (is.numeric(X[, c])) {
start <- ncol(X)
c.c <- (X[, c] - mean(X[, c], na.rm=TRUE)) / (2 * sd(X[, c], na.rm=TRUE))
X[start+1] <- c.c
colnames(X)[start+1] <- paste0("c.", colnames(X)[c])
}
}
return(X)
}
lalonde_1 <- standardise(lalonde)
summary(lalonde_1)
lalonde_1$zero <- ifelse(lalonde_1$c.re78==0, 0, 1)
summary(lalonde_1)
lalonde_1$zero <- ifelse(lalonde_1$re78==0, 0, 1)
summary(lalonde_1)
# logistic regression for zero earnings versus positive earnings
lalonde_1$zero <- ifelse(lalonde_1$re78==0, 0, 1)
fit15_1 <- glm(zero~ age + educ + black +married, family=binomal(link="logit",)data= lalonde_1)
# logistic regression for zero earnings versus positive earnings
lalonde_1$zero <- ifelse(lalonde_1$re78==0, 0, 1)
fit15_1 <- glm(zero~ age + educ + black +married, family=binomal(link="logit"),data= lalonde_1)
# logistic regression for zero earnings versus positive earnings
lalonde_1$zero <- ifelse(lalonde_1$re78==0, 0, 1)
fit15_1 <- glm(zero~ age + educ + black +married, family=binoimal(link="logit"),data= lalonde_1)
knitr::opts_chunk$set(echo = TRUE,
warning=FALSE,
message=FALSE)
pacman::p_load("tidyverse","rstanarm","bayesplot","AER","BGAM","VGAM","brms","ggplot2","glmx","boot","arm","foreign","BB","nleqslve")
# logistic regression for zero earnings versus positive earnings
lalonde_1$zero <- ifelse(lalonde_1$re78==0, 0, 1)
fit15_1 <- glm(zero~ age + educ + black +married, family=binoimal(link="logit"),data= lalonde_1)
# logistic regression for zero earnings versus positive earnings
lalonde_1$zero <- ifelse(lalonde_1$re78==0, 0, 1)
fit15_1 <- glm(zero~ age + educ + black +married, family=binomial(link="logit"),data= lalonde_1)
# logistic regression for zero earnings versus positive earnings
lalonde_1$zero <- ifelse(lalonde_1$re78==0, 0, 1)
fit15_1 <- glm(zero~ age + educ + black +married, family=binomial(link="logit"),data= lalonde_1)
display(fit15_1)
# linear regression for level of earnings given earnings are positive.
# firstly, find earnings are positive.
lalonde_2 <- filter(lalonde_1,re78!="0")
lalonde_2$level <-  ifelse(lalonde_2$re78>25563,1 ,0)
fit15_2 <- glm(zreo ~ age+ educ+ black+ married, data=lalonde_2)
lalonde_2
# linear regression for level of earnings given earnings are positive.
# firstly, find earnings are positive.
lalonde_2 <- filter(lalonde,re78!="0")
lalonde_2$level <-  ifelse(lalonde_2$re78>25563,1 ,0)
fit15_2 <- glm(zreo ~ age+ educ+ black+ married, data=lalonde_2)
lalonde_2$zreo
lalonde_2$age
lalonde
# linear regression for level of earnings given earnings are positive.
# firstly, find earnings are positive.
lalonde_2 <- filter(lalonde_1,re78!="0")
lalonde_2$level <-  ifelse(lalonde_2$re78>25563,1 ,0)
fit15_2 <- glm(lalonde_2$zreo ~ lalonde_2$age+ educ+ black+ married, data=lalonde_2)
lalonde_2
# linear regression for level of earnings given earnings are positive.
# firstly, find earnings are positive.
lalonde_2 <- filter(lalonde_1,re78!="0")
lalonde_2$level <-  ifelse(lalonde_2$re78>25563,1 ,0)
fit15_2 <- glm(level ~ age+ educ+ black+ married, data=lalonde_2)
display(fit15_2)
# Compare predictions that result from each of these models with each other.
pred15_1 <- predict(fit15_1,lalonde)
pred15_2 <- predict(fit15_2,lalonde)
summary(fit15_1)
summary(fit15_2)
